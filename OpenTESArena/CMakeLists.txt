SET(BINNAME TESArena)
PROJECT(${BINNAME} CXX)
SET(OpenTESArena_BINARY_DIR ${CMAKE_BINARY_DIR}/bin)

IF (WIN32)
	include(BuildDeps)
ELSE()
	FIND_PACKAGE(SDL2 REQUIRED)
	FIND_PACKAGE(OpenAL REQUIRED)
	FIND_PACKAGE(WildMidi)
ENDIF (WIN32)

SET(EXTERNAL_LIBS ${OPENAL_LIBRARY} ${SDL2_LIBRARY})
INCLUDE_DIRECTORIES ("${CMAKE_SOURCE_DIR}" ${SDL2_INCLUDE_DIR} ${OPENAL_INCLUDE_DIR})
IF(WILDMIDI_FOUND)
    SET(EXTERNAL_LIBS ${EXTERNAL_LIBS} ${WILDMIDI_LIBRARIES})
    INCLUDE_DIRECTORIES(${WILDMIDI_INCLUDE_DIRS})
    ADD_DEFINITIONS("-DHAVE_WILDMIDI=1")
ELSE(WILDMIDI_FOUND)
    MESSAGE(STATUS "WildMidi not found, no MIDI support!")
ENDIF(WILDMIDI_FOUND)

SET(SRC_ROOT ${TESArena_SOURCE_DIR})

FILE(GLOB_RECURSE TES_ASSETS
    ${SRC_ROOT}/src/Assets/*.h* 
    ${SRC_ROOT}/src/Assets/*.c*)

FILE(GLOB_RECURSE TES_ENTITIES
    ${SRC_ROOT}/src/Entities/*.h* 
    ${SRC_ROOT}/src/Entities/*.c*)

FILE(GLOB_RECURSE TES_GAME
    ${SRC_ROOT}/src/Game/*.h* 
    ${SRC_ROOT}/src/Game/*.c*)

FILE(GLOB_RECURSE TES_INTERFACE
    ${SRC_ROOT}/src/Interface/*.h* 
    ${SRC_ROOT}/src/Interface/*.c*)

FILE(GLOB_RECURSE TES_ITEMS
    ${SRC_ROOT}/src/Items/*.h* 
    ${SRC_ROOT}/src/Items/*.c*)

FILE(GLOB_RECURSE TES_MATH
    ${SRC_ROOT}/src/Math/*.h* 
    ${SRC_ROOT}/src/Math/*.c*)

FILE(GLOB_RECURSE TES_MEDIA
    ${SRC_ROOT}/src/Media/*.h* 
    ${SRC_ROOT}/src/Media/*.c*)

FILE(GLOB_RECURSE TES_RENDERING
    ${SRC_ROOT}/src/Rendering/*.h* 
    ${SRC_ROOT}/src/Rendering/*.c*)

FILE(GLOB_RECURSE TES_UTILITIES
    ${SRC_ROOT}/src/Utilities/*.h* 
    ${SRC_ROOT}/src/Utilities/*.c*)

FILE(GLOB_RECURSE TES_WORLD
    ${SRC_ROOT}/src/World/*.h* 
    ${SRC_ROOT}/src/World/*.c*)

SET(TES_MAIN ${SRC_ROOT}/src/Main.cpp)

SET(TES_RESOURCES ${CMAKE_SOURCE_DIR}/windows/opentesarena.rc)

SET(TES_SOURCES 
    ${TES_ASSETS}
    ${TES_ENTITIES}
    ${TES_GAME}
    ${TES_INTERFACE}
    ${TES_ITEMS}
    ${TES_MATH}
    ${TES_MEDIA}
    ${TES_RENDERING}
    ${TES_UTILITIES}
    ${TES_WORLD}
    ${TES_MAIN})

IF (WIN32)
    LIST(APPEND TES_SOURCES ${TES_RESOURCES})
    ADD_DEFINITIONS("-D_SCL_SECURE_NO_WARNINGS=1")
ENDIF()

ADD_EXECUTABLE (${BINNAME} ${TES_SOURCES})
TARGET_LINK_LIBRARIES(${BINNAME} components ${EXTERNAL_LIBS})
SET_TARGET_PROPERTIES(${BINNAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${OpenTESArena_BINARY_DIR})

SET_TARGET_PROPERTIES(${BINNAME} PROPERTIES
	CXX_STANDARD 11
	CXX_STANDARD_REQUIRED ON
	CXX_EXTENSIONS ON
)

# Copy over required files
FILE(COPY ${CMAKE_SOURCE_DIR}/data DESTINATION ${OpenTESArena_BINARY_DIR})
FILE(COPY ${CMAKE_SOURCE_DIR}/options DESTINATION ${OpenTESArena_BINARY_DIR})

IF (WIN32)
    add_dependencies(${BINNAME} SDL2 OPENAL WILDMIDI)
	
	add_custom_command(
        TARGET ${BINNAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different 
			${DEPS_BIN_DIR}/OpenAL32.dll 
			${DEPS_BIN_DIR}/SDL2.dll 
			${DEPS_BIN_DIR}/wildmidi_dynamic.dll 
			${OpenTESArena_BINARY_DIR}
        COMMENT "Copy dlls to build directory"
        VERBATIM
	)
ENDIF()

# Visual Studio filters.
SOURCE_GROUP("Assets" FILES ${TES_ASSETS})
SOURCE_GROUP("Entities" FILES ${TES_ENTITIES})
SOURCE_GROUP("Game" FILES ${TES_GAME})
SOURCE_GROUP("Interface" FILES ${TES_INTERFACE})
SOURCE_GROUP("Items" FILES ${TES_ITEMS})
SOURCE_GROUP("Math" FILES ${TES_MATH})
SOURCE_GROUP("Media" FILES ${TES_MEDIA})
SOURCE_GROUP("Rendering" FILES ${TES_RENDERING})
SOURCE_GROUP("Utilities" FILES ${TES_UTILITIES})
SOURCE_GROUP("World" FILES ${TES_WORLD})
SOURCE_GROUP("Main" FILES ${TES_MAIN})
SOURCE_GROUP("Resources" FILES ${TES_RESOURCES})

# Set output directory correctly for VS studio 
IF ( MSVC )
    set_target_properties( ${BINNAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${OpenTESArena_BINARY_DIR} )
    set_target_properties( ${BINNAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ${OpenTESArena_BINARY_DIR} )
    set_target_properties( ${BINNAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ${OpenTESArena_BINARY_DIR} )
    set_target_properties( ${BINNAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${OpenTESArena_BINARY_DIR} )
    set_target_properties( ${BINNAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${OpenTESArena_BINARY_DIR} )
ENDIF ( )
